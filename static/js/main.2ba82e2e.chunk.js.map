{"version":3,"sources":["logo.svg","helpers.js","components/Square.js","components/Board.js","components/Game.js","App.js","reportWebVitals.js","index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","console","log","style","background","border","fontSize","fontWeight","cursor","outline","Square","onClick","value","borderRadius","width","height","display","gridTemplate","Board","map","square","Game","useState","Array","fill","board","setBoard","xIsNext","setXisNext","winner","flexDirection","justifyContent","alignItems","gameBoard","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+MAAe,I,mBCAR,SAASA,EAAiBC,GAW/B,IAVA,IAAMC,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAECC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAM,CACvC,kBAAkBD,EAAMC,GAAxB,GAAOE,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAKN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACrE,OAAON,EAAQI,GAGnB,OAAO,KASTG,QAAQC,IAAKT,EANG,CACd,KAAM,KAAM,KACZ,IAAK,IAAK,IACV,KAAM,KAAM,Q,WCrBRU,EAAQ,CACZC,WAAY,YACZC,OAAQ,qBACRC,SAAU,OACVC,WAAY,MACZC,OAAQ,UACRC,QAAS,QASIC,EANA,SAAC,GAAD,IAAIC,EAAJ,EAAIA,QAASC,EAAb,EAAaA,MAAb,OACb,wBAAQT,MAAOA,EAAOQ,QAASA,EAA/B,SACGC,KCVCT,EAAQ,CACZE,OAAQ,qBACRQ,aAAc,OACdC,MAAO,QACPC,OAAQ,QACRC,QAAS,OACTC,aAAc,mCAWDC,EARD,SAAC,GAAD,IAAIxB,EAAJ,EAAIA,QAASiB,EAAb,EAAaA,QAAb,OACZ,qBAAKR,MAAOA,EAAZ,SACGT,EAAQyB,KAAK,SAAEC,EAAQxB,GAAV,OACZ,cAAC,EAAD,CAAgBgB,MAAOQ,EAAQT,QAAS,kBAAMA,EAASf,KAA1CA,SCqCJyB,EAhDF,WAEX,MAA0BC,mBAAUC,MAAO,GAAIC,KAAM,OAArD,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BJ,oBAAU,GAAxC,mBAAOK,EAAP,KAAgBC,EAAhB,KACMC,EAASpC,EAAiBgC,GAiChC,OACE,sBAAKtB,MAhCO,CACZa,QAAS,OACTc,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZjB,OAAQ,SA2BR,UACE,cAAC,EAAD,CAAOrB,QAAS+B,EAAOd,QAzBP,SAAAf,GAElB,IAAMqC,EAAS,YAAOR,GAGjBI,GAAUI,EAAUrC,KAGzBqC,EAAUrC,GAAK+B,EAAU,IAAM,IAC/BD,EAAUO,GACVL,GAAaD,OAgBX,gCACE,4BAAIE,EAAS,WAAaA,EAAS,iBAAoBF,EAAU,IAAM,OAT3E,wBAAQhB,QAAS,kBAAMe,EAAUH,MAAO,GAAIC,KAAM,QAAlD,+BC9BWU,EAFH,kBAAM,cAAC,EAAD,KCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2ba82e2e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export function calculateWinner( squares ) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for ( let i = 0; i < lines.length; i++ ) {\n    const [a, b, c] = lines[i];\n    if ( squares[a] && squares[a] === squares[b] && squares[a] === squares[c] ) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nconst squares = [\n  null, null, null,\n  'X', 'X', 'O',\n  null, null, null\n];\n\nconsole.log( calculateWinner( squares ) );","import React from \"react\";\n\nconst style = {\n  background: 'lightblue',\n  border: '2px solid darkblue',\n  fontSize: '30px',\n  fontWeight: '800',\n  cursor: 'pointer',\n  outline: 'none'\n}\n\nconst Square = ( { onClick, value } ) => (\n  <button style={style} onClick={onClick}>\n    {value}\n  </button>\n);\n\nexport default Square;\n","import React from \"react\";\nimport Square from './Square';\n\nconst style = {\n  border: '4px solid darkblue',\n  borderRadius: '10px',\n  width: '245px',\n  height: '245px',\n  display: 'grid',\n  gridTemplate: 'repeat(3, 1fr) / repeat(3, 1fr)'\n}\n\nconst Board = ( { squares, onClick } ) => (\n  <div style={style}>\n    {squares.map( ( square, i ) => (\n      <Square key={i} value={square} onClick={() => onClick( i )} />\n    ) )}\n  </div>\n)\n\nexport default Board;\n","import React, { useState } from \"react\";\nimport { calculateWinner } from \"../helpers\";\nimport Board from './Board';\n\nconst Game = () => {\n\n  const [board, setBoard] = useState( Array( 9 ).fill( null ) );\n  const [xIsNext, setXisNext] = useState( true );\n  const winner = calculateWinner( board );\n\n  const style = {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh'\n  }\n\n  const handleClick = i => {\n    // always make a copy of an array to no mutate the state\n    const gameBoard = [...board];\n\n    // If user clicks an occupied square or if game is won, return \n    if ( winner || gameBoard[i] ) return;\n\n    // Put an X or O in the click square\n    gameBoard[i] = xIsNext ? 'X' : 'O';\n    setBoard( gameBoard );\n    setXisNext( !xIsNext );\n  }\n\n  const jumpTo = () => {\n\n  }\n\n  const renderMoves = () => (\n    <button onClick={() => setBoard( Array( 9 ).fill( null ) )}>\n      Start Game\n    </button>\n  )\n\n  return (\n    <div style={style}>\n      <Board squares={board} onClick={handleClick} />\n      <div>\n        <p>{winner ? 'Winner: ' + winner : 'Next Player: ' + ( xIsNext ? 'X' : 'O' )}</p>\n        {renderMoves()}\n      </div>\n    </div>\n  )\n}\n\nexport default Game\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Game from \"./components/Game\";\n\nconst App = () => <Game />\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}